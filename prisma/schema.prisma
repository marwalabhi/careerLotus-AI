// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// User table for authentication
model User {
  id           String    @id @default(cuid())
  email        String?   @unique
  name         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime   @updatedAt

 // Relations
  chatSessions ChatSession[]

  @@map("users")
}

// Chat session table to group messages
model ChatSession {
  id          String   @id @default(uuid())
  title       String   @default("New Chat")
  userId      String?  // Optional if no auth
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("chat_sessions")
}

// Message table to store chat messages
model Message {
  id            String      @id @default(cuid())
  content       String
  role          MessageRole // "user" ya "assistant"
  chatSessionId String
  createdAt     DateTime    @default(now())

  // Relations
  chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@index([chatSessionId, createdAt])
}

// Enum for message roles
enum MessageRole {
  USER
  ASSISTANT
}
